{"name":"Killrchat","tagline":"KillrChat, a scalable chat backed by Apache Cassandra and Spring Boot","body":"KillrChat\r\n====================\r\n\r\nA hand's on exercise for Cassandra 2.1.\r\n\r\n\r\n# Introduction\r\n\r\nThis hands-on will make you, step by step with unit tests, create a working chat application using\r\n\r\n* **[Apache Cassandra™]**\r\n* **[Achilles]**\r\n* **[Spring Boot]**\r\n* **[AngularJS]** + **[UI Bootstrap]**\r\n\r\nThe hands-on will focus on the data modelling part, you need to:\r\n\r\n1. understand the data model (tables)\r\n2. implement the services to make the tests pass using **[Achilles]**\r\n\r\nAll the front-end, as well as the REST resource and all Spring configuration config and other glue code is provided as a\r\nconvenience so that participants can focus solely on the data modelling and service layer.\r\n\r\nFor object mapping, we use **[Achilles]** which provides many tools to make development more effective and easier. We'll\r\nuse the **[JUnit rule support]** from **[Achilles]** to start an embedded Cassandra in memory for unit testing.\r\n\r\nOnce all the exercises are done, we can have some fun using the real chat!\r\n\r\n# Running the application\r\n\r\n> Warning! You'll need a recent and decent browser (no IE8) to make the chat front-end work:\r\n  IE10, Chrome, FireFox ...\r\n\r\nFirst clone the repository with `git clone https://github.com/doanduyhai/killrchat.git`\r\nThen enter the folder `cd killrchat`\r\n\r\n## Development mode\r\n\r\nTo run the application in the development mode:\r\n\r\n    killrchat> mvn clean test\r\n    killrchat> mvn spring-boot:run\r\n\r\nWhen running the application in dev mode, **Achilles** will start an embedded Cassandra server and create\r\nthe following data folders:\r\n\r\n1. `/tmp/killrchat_cassandra/data`\r\n2. `/tmp/killrchat_cassandra/commitlog`\r\n3. `/tmp/killrchat_cassandra/saved_caches`\r\n\r\nYou can change those default values in the `src/main/resources/config/application.yml` file.\r\n\r\nThen connect to the chat by opening your browser at\r\n[http://localhost:8080/killrchat/index.html](http://localhost:8080/killrchat/index.html).\r\n\r\n## Production mode\r\n\r\nTo run the application in the production mode:\r\n\r\n    killrchat> mvn clean test\r\n    killrchat> mvn spring-boot:run -Pprod\r\n\r\nWhen running the application in prod mode, **Achilles** will connect to an existing Cassandra server. You can\r\nconfigure the server host and port in the the `src/main/resources/config/application.yml` file.\r\nBy default **Achilles** will execute the `src/main/resources/cassandra/schema_creation.cql` script to create the\r\n`killrchat` keyspace and appropriate tables.\r\n\r\nThen connect to the chat by opening your browser at\r\n[http://localhost:8080/killrchat/index.html](http://localhost:8080/killrchat/index.html).\r\n\r\nTo deploy the application in multiple back-end servers, you will need to reconfigure the messaging system in the\r\n**`ChatRoomResource`** and **`MessageResource`**. For the hand's on, we use an in-memory messaging system but for\r\nproduction you'd probably want to plugin a distributed messaging broker like RabbitMQ.\r\n\r\n## Packaging the application\r\n\r\nTo package **KillrChat** and build a stand-alone Java jar archive, type `mvn package`. It will generate a\r\n**killrchat-1.0.war** file in the `target` folder\r\n\r\nTo run the application in development mode:\r\n\r\n    > java -jar killrchat-1.0.war --spring.profiles.active=dev -Dlogback.configurationFile=logback_dev.xml\r\n\r\nTo run the application in production mode:\r\n\r\n    > java -jar killrchat-1.0.war --spring.profiles.active=prod -Dlogback.configurationFile=logback_prod.xml\r\n\r\n# Exercises\r\n\r\n* **[Exercise 1](https://github.com/doanduyhai/killrchat/blob/master/Exercise1.md)**: manage accounts\r\n* **[Exercise 2](https://github.com/doanduyhai/killrchat/blob/master/Exercise2.md)**: manage chat rooms\r\n* **[Exercise 3](https://github.com/doanduyhai/killrchat/blob/master/Exercise3.md)**: manage participants joining and leaving rooms\r\n* **[Exercise 4](https://github.com/doanduyhai/killrchat/blob/master/Exercise4.md)**: manage chat messages\r\n\r\n# Comments\r\n\r\nThe data model for chat room message is still not perfect because it is a wide row. Typically the partition will grow\r\nover time and performance will suffer.\r\n\r\nThe solution is to use **[bucketing]** techniques but it is an advanced data modelling topic, far beyond the goal of\r\nthis hands-on.\r\n\r\nAlternatively, we can use the **[DateTieredCompactionStrategy]** to make reading recent messages faster.\r\n\r\n[Apache Cassandra™]: http://planetcassandra.org/cassandra\r\n[Achilles]: http://www.achilles.io\r\n[JUnit rule support]: https://github.com/doanduyhai/Achilles/wiki/Unit-testing#usage\r\n[Spring Boot]: http://projects.spring.io/spring-boot\r\n[AngularJS]: https://angularjs.org\r\n[UI Bootstrap]: http://angular-ui.github.io/bootstrap\r\n[Postman]: http://www.getpostman.com\r\n[DevCenter]: http://planetcassandra.org/devcenter\r\n[Datastax]: http://www.datastax.com\r\n[bucketing]: http://www.datastax.com/dev/blog/advanced-time-series-with-cassandra\r\n[DateTieredCompactionStrategy]: http://www.datastax.com/dev/blog/datetieredcompactionstrategy\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}